// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/cloud-club/Aviator-service/types/server"
)

// MockSubnetInterface is an autogenerated mock type for the SubnetInterface type
type MockSubnetInterface struct {
	mock.Mock
}

type MockSubnetInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubnetInterface) EXPECT() *MockSubnetInterface_Expecter {
	return &MockSubnetInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: url
func (_m *MockSubnetInterface) Get(url string) (*types.SubnetList, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.SubnetList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.SubnetList, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *types.SubnetList); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubnetList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubnetInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSubnetInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url string
func (_e *MockSubnetInterface_Expecter) Get(url interface{}) *MockSubnetInterface_Get_Call {
	return &MockSubnetInterface_Get_Call{Call: _e.mock.On("Get", url)}
}

func (_c *MockSubnetInterface_Get_Call) Run(run func(url string)) *MockSubnetInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSubnetInterface_Get_Call) Return(_a0 *types.SubnetList, _a1 error) *MockSubnetInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubnetInterface_Get_Call) RunAndReturn(run func(string) (*types.SubnetList, error)) *MockSubnetInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubnetInterface creates a new instance of MockSubnetInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubnetInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubnetInterface {
	mock := &MockSubnetInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
