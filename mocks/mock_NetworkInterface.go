// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/cloud-club/Aviator-service/types/server"
)

// MockNetworkInterface is an autogenerated mock type for the NetworkInterface type
type MockNetworkInterface struct {
	mock.Mock
}

type MockNetworkInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkInterface) EXPECT() *MockNetworkInterface_Expecter {
	return &MockNetworkInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: url
func (_m *MockNetworkInterface) Get(url string) (*types.NetworkInterfaceList, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.NetworkInterfaceList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.NetworkInterfaceList, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *types.NetworkInterfaceList); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NetworkInterfaceList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetworkInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNetworkInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url string
func (_e *MockNetworkInterface_Expecter) Get(url interface{}) *MockNetworkInterface_Get_Call {
	return &MockNetworkInterface_Get_Call{Call: _e.mock.On("Get", url)}
}

func (_c *MockNetworkInterface_Get_Call) Run(run func(url string)) *MockNetworkInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetworkInterface_Get_Call) Return(_a0 *types.NetworkInterfaceList, _a1 error) *MockNetworkInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetworkInterface_Get_Call) RunAndReturn(run func(string) (*types.NetworkInterfaceList, error)) *MockNetworkInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetworkInterface creates a new instance of MockNetworkInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkInterface {
	mock := &MockNetworkInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
